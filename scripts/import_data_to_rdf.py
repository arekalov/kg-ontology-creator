#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ RDF –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import pandas as pd
from rdflib import Graph, Namespace, RDF, RDFS, Literal, URIRef
from rdflib.namespace import XSD
from pathlib import Path
from datetime import datetime
import argparse

class DataImporter:
    def __init__(self, ontology_file):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–Ω—Ç–æ–ª–æ–≥–∏—é
        self.g = Graph()
        print(f"Loading ontology from {ontology_file}...")
        self.g.parse(ontology_file, format='xml')
        print(f"  Loaded {len(self.g)} triples from ontology")
        
        # Namespace
        self.WOT = Namespace("http://www.semanticweb.org/ontology/wot#")
        self.g.bind("wot", self.WOT)
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.tank_counter = {}
        self.map_counter = {}
        self.battle_counter = 0
        self.gun_counter = {}
        self.engine_counter = {}
        self.turret_counter = {}
        self.suspension_counter = {}
        self.radio_counter = {}
        
        # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        self.data_dir = Path(__file__).parent.parent / "data"
        self.ontology_dir = Path(__file__).parent.parent / "ontology"
    
    def normalize_tank_id(self, tank_id):
        """–°–æ–∑–¥–∞–µ—Ç URI –¥–ª—è —Ç–∞–Ω–∫–∞"""
        return self.WOT[f"Tank_{tank_id}"]

    def normalize_battle_id(self, index):
        """–°–æ–∑–¥–∞–µ—Ç URI –¥–ª—è –±–æ—è"""
        return self.WOT[f"Battle_{index}"]
    
    def normalize_performance_id(self, index):
        """–°–æ–∑–¥–∞–µ—Ç URI –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è"""
        return self.WOT[f"Performance_{index}"]
    
    def map_class_to_type(self, tank_class):
        """–ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–∞ —Ç–∞–Ω–∫–∞ –≤ —Ç–∏–ø –æ–Ω—Ç–æ–ª–æ–≥–∏–∏"""
        mapping = {
            'HT': 'HeavyTank',
            'MT': 'MediumTank',
            'LT': 'LightTank',
            'TD': 'TankDestroyer',
            'SPG': 'SelfPropelledGun',
        }
        return self.WOT[mapping.get(tank_class, 'Tank')]
    
    def map_nation_to_uri(self, nation_code):
        """–ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–∞ –Ω–∞—Ü–∏–∏ –≤ URI"""
        mapping = {
            'USSR': 'USSR',
            'Germany': 'Germany',
            'USA': 'USA',
            'France': 'France',
            'UK': 'UK',
            'China': 'China',
            'Japan': 'Japan',
            'Czech': 'Czech',
            'Sweden': 'Sweden',
            'Poland': 'Poland',
            'Italy': 'Italy',
        }
        return self.WOT[mapping.get(nation_code, nation_code)]
    
    def create_module_instance(self, module_id, module_type, module_name=None, **properties):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –º–æ–¥—É–ª—è"""
        if not module_id or pd.isna(module_id):
            return None
        
        module_uri = self.WOT[f"{module_type}_{module_id}"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å
        counter_map = {
            'Gun': self.gun_counter,
            'Engine': self.engine_counter,
            'Turret': self.turret_counter,
            'Suspension': self.suspension_counter,
            'Radio': self.radio_counter
        }
        
        counter = counter_map.get(module_type, {})
        
        if module_uri not in counter:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –º–æ–¥—É–ª—è
            self.g.add((module_uri, RDF.type, self.WOT[module_type]))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if module_name and pd.notna(module_name):
                prop_name = f"{module_type.lower()}Name"
                self.g.add((module_uri, self.WOT[prop_name], Literal(str(module_name), datatype=XSD.string)))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            for prop, value in properties.items():
                if pd.notna(value):
                    if isinstance(value, (int, float)):
                        if isinstance(value, float):
                            self.g.add((module_uri, self.WOT[prop], Literal(float(value), datatype=XSD.float)))
                        else:
                            self.g.add((module_uri, self.WOT[prop], Literal(int(value), datatype=XSD.integer)))
                    else:
                        self.g.add((module_uri, self.WOT[prop], Literal(str(value), datatype=XSD.string)))
            
            counter[module_uri] = 0
        
        counter[module_uri] += 1
        return module_uri
    
    def get_role_name_from_type(self, tank_type):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å —Ç–∞–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞"""
        role_mapping = {
            'heavyTank': 'HeavyAssault',
            'mediumTank': 'Support',
            'lightTank': 'Scout',
            'AT-SPG': 'Sniper',
            'SPG': 'Artillery'
        }
        return role_mapping.get(tank_type, None)
    
    def normalize_uri_part(self, text):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ URI"""
        if not text:
            return ""
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        text = str(text).replace(' ', '_').replace('.', '_').replace('-', '_')
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã
        text = ''.join(c if ord(c) < 128 else '_' for c in text)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        while '__' in text:
            text = text.replace('__', '_')
        return text
    
    def import_tanks_from_wot_data(self, limit=None):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–∞—Ö –∏–∑ wot_data.csv"""
        print("\n" + "=" * 60)
        print("IMPORTING TANK DATA FROM wot_data.csv")
        print("=" * 60)
        
        wot_data_file = self.data_dir / "wot_data.csv"
        if not wot_data_file.exists():
            print(f"‚ö†Ô∏è  File not found: {wot_data_file}")
            return
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(wot_data_file, sep=';', nrows=limit)
        print(f"Loaded {len(df)} tank configurations")
        
        # –ù–ï –≥—Ä—É–ø–ø–∏—Ä—É–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
        print(f"Processing all {len(df)} configurations to extract modules...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        for idx, row in df.iterrows():
            # –°–æ–∑–¥–∞–µ–º Gun
            if pd.notna(row.get('gun')) and pd.notna(row.get('gun.name')):
                gun_uri = self.create_module_instance(
                    module_id=row['gun'],
                    module_type='Gun',
                    module_name=row.get('gun.name'),
                    avgPenetration=row.get('ammo.avg_penetration'),
                    avgDamage=row.get('ammo.avg_damage'),
                    fireRate=row.get('gun.fire_rate'),
                    aimTime=row.get('gun.aim_time'),
                    dpm=row.get('dpm')
                )
            
            # –°–æ–∑–¥–∞–µ–º Engine
            if pd.notna(row.get('engine')) and pd.notna(row.get('engine.power')):
                engine_uri = self.create_module_instance(
                    module_id=row['engine'],
                    module_type='Engine',
                    power=row.get('engine.power')
                )
            
            # –°–æ–∑–¥–∞–µ–º Turret
            if pd.notna(row.get('turret')):
                turret_uri = self.create_module_instance(
                    module_id=row['turret'],
                    module_type='Turret'
                )
            
            # –°–æ–∑–¥–∞–µ–º Suspension
            if pd.notna(row.get('suspension')):
                suspension_uri = self.create_module_instance(
                    module_id=row['suspension'],
                    module_type='Suspension'
                )
            
            # –°–æ–∑–¥–∞–µ–º Radio
            if pd.notna(row.get('radio')):
                radio_uri = self.create_module_instance(
                    module_id=row['radio'],
                    module_type='Radio'
                )
            
            if (idx + 1) % 1000 == 0:
                print(f"  Processed {idx + 1}/{len(df)} configurations for modules")
        
        print(f"\nüì¶ Created module instances:")
        print(f"   Guns: {len(self.gun_counter)}")
        print(f"   Engines: {len(self.engine_counter)}")
        print(f"   Turrets: {len(self.turret_counter)}")
        print(f"   Suspensions: {len(self.suspension_counter)}")
        print(f"   Radios: {len(self.radio_counter)}")
        
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Ç–∞–Ω–∫–∏ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
        print(f"\nüöú Creating tank instances...")
        tanks_unique = df.groupby('name').first().reset_index()
        print(f"Unique tanks: {len(tanks_unique)}")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Ä–æ–ª–µ–π
        characteristics_counter = {}
        roles_counter = {}
        
        for idx, row in tanks_unique.iterrows():
            tank_name = row['name'].strip()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tank_id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            tank_id = row.get('tank_id', f"wot_{idx}")
            tank_uri = self.normalize_tank_id(tank_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–Ω–∫–∞
            tank_type = self.map_class_to_type(row.get('type', 'Tank'))
            self.g.add((tank_uri, RDF.type, tank_type))
            
            # –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            self.g.add((tank_uri, self.WOT.tankName, Literal(tank_name, datatype=XSD.string)))
            
            if pd.notna(row.get('short_name')):
                self.g.add((tank_uri, self.WOT.shortName, Literal(row['short_name'], datatype=XSD.string)))
            
            if pd.notna(row.get('tier')):
                self.g.add((tank_uri, self.WOT.tier, Literal(int(row['tier']), datatype=XSD.integer)))
            
            # –ù–∞—Ü–∏—è
            if pd.notna(row.get('nation')):
                nation_uri = self.map_nation_to_uri(row['nation'].capitalize())
                self.g.add((tank_uri, self.WOT.belongsToNation, nation_uri))
            
            # –°–æ–∑–¥–∞–µ–º TankCharacteristics –¥–ª—è —Ç–∞–Ω–∫–∞
            has_characteristics = False
            char_uri = self.WOT[f"Characteristics_{self.normalize_uri_part(tank_name)}"]
            
            if pd.notna(row.get('hp')):
                self.g.add((tank_uri, self.WOT.maxHP, Literal(int(row['hp']), datatype=XSD.integer)))
                self.g.add((char_uri, self.WOT.hp, Literal(int(row['hp']), datatype=XSD.integer)))
                has_characteristics = True
            
            if pd.notna(row.get('hull_hp')):
                self.g.add((char_uri, self.WOT.hullHP, Literal(int(row['hull_hp']), datatype=XSD.integer)))
                has_characteristics = True
            
            if pd.notna(row.get('hull_weight')):
                self.g.add((char_uri, self.WOT.hullWeight, Literal(int(row['hull_weight']), datatype=XSD.integer)))
                has_characteristics = True
            
            if pd.notna(row.get('weight')):
                self.g.add((tank_uri, self.WOT.weight, Literal(int(row['weight']), datatype=XSD.integer)))
            
            if pd.notna(row.get('speed_forward')):
                self.g.add((tank_uri, self.WOT.speedForward, Literal(int(row['speed_forward']), datatype=XSD.integer)))
                self.g.add((char_uri, self.WOT.speedForward, Literal(int(row['speed_forward']), datatype=XSD.integer)))
                has_characteristics = True
            
            if pd.notna(row.get('speed_backward')):
                self.g.add((tank_uri, self.WOT.speedBackward, Literal(int(row['speed_backward']), datatype=XSD.integer)))
                self.g.add((char_uri, self.WOT.speedBackward, Literal(int(row['speed_backward']), datatype=XSD.integer)))
                has_characteristics = True
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–∞–Ω–∫–æ–º
            if has_characteristics:
                self.g.add((char_uri, RDF.type, self.WOT.TankCharacteristics))
                self.g.add((tank_uri, self.WOT.hasCharacteristics, char_uri))
                characteristics_counter[char_uri] = characteristics_counter.get(char_uri, 0) + 1
            
            # –°–æ–∑–¥–∞–µ–º TankRole –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–∞–Ω–∫–∞
            role_name = self.get_role_name_from_type(row.get('type', 'Tank'))
            if role_name:
                role_uri = self.WOT[f"Role_{role_name}"]
                if role_uri not in roles_counter:
                    self.g.add((role_uri, RDF.type, self.WOT.TankRole))
                    self.g.add((role_uri, self.WOT.roleName, Literal(role_name, datatype=XSD.string)))
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
                    role_descriptions = {
                        'HeavyAssault': 'Breakthrough and frontline assault tank',
                        'Support': 'Medium range support and flanking',
                        'Scout': 'Reconnaissance and spotting',
                        'Sniper': 'Long range fire support',
                        'Artillery': 'Indirect fire support'
                    }
                    if role_name in role_descriptions:
                        self.g.add((role_uri, self.WOT.roleDescription, 
                                   Literal(role_descriptions[role_name], datatype=XSD.string)))
                
                self.g.add((tank_uri, self.WOT.hasRole, role_uri))
                roles_counter[role_uri] = roles_counter.get(role_uri, 0) + 1
            
            # –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
            if pd.notna(row.get('is_premium')):
                self.g.add((tank_uri, self.WOT.isPremium, Literal(bool(row['is_premium']), datatype=XSD.boolean)))
            
            if pd.notna(row.get('is_wheeled')):
                self.g.add((tank_uri, self.WOT.isWheeled, Literal(bool(row['is_wheeled']), datatype=XSD.boolean)))
            
            if pd.notna(row.get('is_gift')):
                self.g.add((tank_uri, self.WOT.isGift, Literal(bool(row['is_gift']), datatype=XSD.boolean)))
            
            # –¶–µ–Ω—ã
            if pd.notna(row.get('price_credit')) and row['price_credit'] != 0:
                self.g.add((tank_uri, self.WOT.priceCredit, Literal(int(row['price_credit']), datatype=XSD.integer)))
            
            if pd.notna(row.get('price_gold')) and row['price_gold'] != 0:
                self.g.add((tank_uri, self.WOT.priceGold, Literal(int(row['price_gold']), datatype=XSD.integer)))
            
            # –°–≤—è–∑–∏ —Å –º–æ–¥—É–ª—è–º–∏
            if pd.notna(row.get('gun')):
                gun_uri = self.WOT[f"Gun_{row['gun']}"]
                if gun_uri in self.gun_counter:
                    self.g.add((tank_uri, self.WOT.hasGun, gun_uri))
                    self.g.add((tank_uri, self.WOT.equipsWith, gun_uri))
            
            if pd.notna(row.get('engine')):
                engine_uri = self.WOT[f"Engine_{row['engine']}"]
                if engine_uri in self.engine_counter:
                    self.g.add((tank_uri, self.WOT.hasEngine, engine_uri))
                    self.g.add((tank_uri, self.WOT.equipsWith, engine_uri))
            
            if pd.notna(row.get('turret')):
                turret_uri = self.WOT[f"Turret_{row['turret']}"]
                if turret_uri in self.turret_counter:
                    self.g.add((tank_uri, self.WOT.hasTurret, turret_uri))
                    self.g.add((tank_uri, self.WOT.equipsWith, turret_uri))
            
            if pd.notna(row.get('suspension')):
                suspension_uri = self.WOT[f"Suspension_{row['suspension']}"]
                if suspension_uri in self.suspension_counter:
                    self.g.add((tank_uri, self.WOT.hasSuspension, suspension_uri))
                    self.g.add((tank_uri, self.WOT.equipsWith, suspension_uri))
            
            if pd.notna(row.get('radio')):
                radio_uri = self.WOT[f"Radio_{row['radio']}"]
                if radio_uri in self.radio_counter:
                    self.g.add((tank_uri, self.WOT.hasRadio, radio_uri))
                    self.g.add((tank_uri, self.WOT.equipsWith, radio_uri))
            
            if (idx + 1) % 100 == 0:
                print(f"  Processed {idx + 1}/{len(tanks_unique)} tanks")
        
        print(f"‚úÖ Imported {len(tanks_unique)} tanks with module connections")
        print(f"   Tank Characteristics: {len(characteristics_counter)}")
        print(f"   Tank Roles: {len(roles_counter)}")
    
    def clean_data(self, df):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        print("\nüßπ Cleaning data...")
        initial_count = len(df)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
        df = df.dropna(subset=['tank_id', 'name', 'display_name'])
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —É—Ä–æ–Ω–æ–º (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –±–æ–∏)
        df = df[df['damage'] >= 0]
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –±–æ—è
        df = df[df['duration'] > 0]
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        df = df.drop_duplicates()
        
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0 –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns
        df[numeric_columns] = df[numeric_columns].fillna(0)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        df['shots_fired'] = df['shots_fired'].clip(lower=0)
        df['direct_hits'] = df['direct_hits'].clip(lower=0, upper=df['shots_fired'])
        df['penetrations'] = df['penetrations'].clip(lower=0, upper=df['direct_hits'])
        
        cleaned_count = len(df)
        removed = initial_count - cleaned_count
        
        print(f"  ‚úÖ Cleaned: {initial_count} ‚Üí {cleaned_count} records")
        if removed > 0:
            print(f"  üóëÔ∏è  Removed {removed} invalid records ({removed/initial_count*100:.1f}%)")
        
        return df
    
    def import_battles_from_tomato(self, limit=10000, random_sample=True):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–æ—è—Ö –∏–∑ tomato.csv"""
        print("\n" + "=" * 60)
        print(f"IMPORTING BATTLE DATA FROM tomato.csv")
        print(f"  Limit: {limit}")
        print(f"  Random sampling: {random_sample}")
        print("=" * 60)
        
        tomato_file = self.data_dir / "tomato.csv"
        if not tomato_file.exists():
            print(f"‚ö†Ô∏è  File not found: {tomato_file}")
            return
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if random_sample:
            # –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            print("Counting total battles...")
            total_lines = sum(1 for _ in open(tomato_file)) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print(f"  Total battles in file: {total_lines:,}")
            
            if limit >= total_lines:
                print(f"  Loading all {total_lines:,} battles...")
                df = pd.read_csv(tomato_file)
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                print(f"  Selecting {limit:,} random battles...")
                import numpy as np
                np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                skip_idx = np.random.choice(range(1, total_lines + 1), 
                                           size=total_lines - limit, 
                                           replace=False)
                df = pd.read_csv(tomato_file, skiprows=skip_idx)
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –∑–∞–ø–∏—Å–µ–π
            print(f"Loading first {limit:,} battles...")
            df = pd.read_csv(tomato_file, nrows=limit)
        
        print(f"  Loaded {len(df):,} battle records")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.clean_data(df)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–∫–∞–º –∏ —Ç–∞–Ω–∫–∞–º
        print(f"\nüìä Data statistics:")
        print(f"  Unique players: {df['display_name'].nunique()}")
        print(f"  Unique tanks: {df['tank_id'].nunique()}")
        print(f"  Nations: {', '.join(df['nation'].unique())}")
        print(f"  Classes: {', '.join(df['class'].unique())}")
        print(f"  Avg damage: {df['damage'].mean():.0f}")
        print(f"  Win rate: {df['won'].mean()*100:.1f}%")
        
        for idx, row in df.iterrows():
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            battle_uri = self.normalize_battle_id(idx)
            perf_uri = self.normalize_performance_id(idx)
            tank_uri = self.normalize_tank_id(row['tank_id'])
            map_name = row.get('display_name')  # –í —ç—Ç–æ–º –ø–æ–ª–µ —Ä–µ–∞–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞—Ä—Ç–∞

            # === Battle ===
            self.g.add((battle_uri, RDF.type, self.WOT.Battle))

            # –í—Ä–µ–º—è –±–æ—è, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ–±–µ–¥–∞, —Å—Ç–æ—Ä–æ–Ω–∞, –≤–∑–≤–æ–¥ ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ...
            if pd.notna(row.get('battle_time')):
                try:
                    battle_time = pd.to_datetime(row['battle_time'])
                    self.g.add((battle_uri, self.WOT.battleTime,
                                Literal(battle_time, datatype=XSD.dateTime)))
                except:
                    pass

            if pd.notna(row.get('duration')):
                self.g.add((battle_uri, self.WOT.duration,
                            Literal(int(row['duration']), datatype=XSD.integer)))

            if pd.notna(row.get('won')):
                self.g.add((battle_uri, self.WOT.won,
                            Literal(bool(row['won']), datatype=XSD.boolean)))

            if pd.notna(row.get('spawn')):
                self.g.add((battle_uri, self.WOT.spawn,
                            Literal(int(row['spawn']), datatype=XSD.integer)))

            if pd.notna(row.get('platoon')):
                self.g.add((battle_uri, self.WOT.platoon,
                            Literal(int(row['platoon']), datatype=XSD.integer)))

            # –ù–æ–≤–æ–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ Battle.onMap (datatype string)
            if pd.notna(map_name):
                self.g.add((battle_uri, self.WOT.onMap,
                            Literal(str(map_name), datatype=XSD.string)))
                self.map_counter[map_name] = self.map_counter.get(map_name, 0) + 1

            # === Tank === (–∫–∞–∫ —Ä–∞–Ω—å—à–µ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω)
            if tank_uri not in self.tank_counter:
                tank_type = self.map_class_to_type(row.get('class', 'Tank'))
                self.g.add((tank_uri, RDF.type, tank_type))
                self.g.add((tank_uri, self.WOT.tankName,
                            Literal(row['name'], datatype=XSD.string)))
                if pd.notna(row.get('tier')):
                    self.g.add((tank_uri, self.WOT.tier,
                                Literal(int(row['tier']), datatype=XSD.integer)))
                if pd.notna(row.get('nation')):
                    nation_uri = self.map_nation_to_uri(row['nation'])
                    self.g.add((tank_uri, self.WOT.belongsToNation, nation_uri))
                if pd.notna(row.get('max_health')):
                    self.g.add((tank_uri, self.WOT.maxHP,
                                Literal(int(row['max_health']), datatype=XSD.integer)))
                self.tank_counter[tank_uri] = 0

            self.tank_counter[tank_uri] += 1

            # === BattlePerformance ===
            self.g.add((perf_uri, RDF.type, self.WOT.BattlePerformance))

            # –°–≤—è–∑–∏ (–±–µ–∑ achievedBy):
            self.g.add((perf_uri, self.WOT.inBattle, battle_uri))
            self.g.add((perf_uri, self.WOT.withTank, tank_uri))
            self.g.add((battle_uri, self.WOT.hasPerformance, perf_uri))
            
            # –£—Ä–æ–Ω
            for field in ['damage', 'sniperDamage', 'damageReceived', 
                         'damageReceivedFromInvisible', 'potentialDamageReceived', 
                         'damageBlocked']:
                snake_field = ''.join(['_'+c.lower() if c.isupper() else c for c in field]).lstrip('_')
                if pd.notna(row.get(snake_field)):
                    self.g.add((perf_uri, self.WOT[field], 
                              Literal(int(row[snake_field]), datatype=XSD.integer)))
            
            # –°—Ç—Ä–µ–ª—å–±–∞
            for field in ['shotsFired', 'directHits', 'penetrations', 'hitsReceived', 
                         'penetrationsReceived', 'splashHitsReceived']:
                snake_field = ''.join(['_'+c.lower() if c.isupper() else c for c in field]).lstrip('_')
                if pd.notna(row.get(snake_field)):
                    self.g.add((perf_uri, self.WOT[field], 
                              Literal(int(row[snake_field]), datatype=XSD.integer)))
            
            # –î–µ–π—Å—Ç–≤–∏—è
            for field in ['spots', 'frags', 'trackingAssist', 'spottingAssist']:
                snake_field = ''.join(['_'+c.lower() if c.isupper() else c for c in field]).lstrip('_')
                if pd.notna(row.get(snake_field)):
                    self.g.add((perf_uri, self.WOT[field], 
                              Literal(int(row[snake_field]), datatype=XSD.integer)))
            
            # –ë–∞–∑–∞
            for field in ['baseDefensePoints', 'baseCapturePoints']:
                snake_field = ''.join(['_'+c.lower() if c.isupper() else c for c in field]).lstrip('_')
                if pd.notna(row.get(snake_field)):
                    self.g.add((perf_uri, self.WOT[field], 
                              Literal(int(row[snake_field]), datatype=XSD.integer)))
            
            # –ü—Ä–æ—á–µ–µ
            if pd.notna(row.get('life_time')):
                self.g.add((perf_uri, self.WOT.lifeTime, 
                          Literal(int(row['life_time']), datatype=XSD.integer)))
            
            if pd.notna(row.get('distance_traveled')):
                self.g.add((perf_uri, self.WOT.distanceTraveled, 
                          Literal(int(row['distance_traveled']), datatype=XSD.integer)))
            
            if pd.notna(row.get('base_xp')):
                self.g.add((perf_uri, self.WOT.baseXP, 
                          Literal(int(row['base_xp']), datatype=XSD.integer)))
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if (idx + 1) % 1000 == 0:
                print(f"  Processed {idx + 1}/{len(df)} battles")
        
        self.battle_counter = len(df)
        
        print(f"‚úÖ Imported {len(df)} battles")
        print(f"   Unique tanks: {len(self.tank_counter)}")
    
    def save_graph(self, output_name="wot_with_data"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ –≤ OWL —Ñ–∞–π–ª"""
        print("\n" + "=" * 60)
        print("SAVING KNOWLEDGE GRAPH")
        print("=" * 60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ OWL —Ñ–æ—Ä–º–∞—Ç (RDF/XML)
        filename = f'{output_name}.owl'
        filepath = self.ontology_dir / filename
        
        print(f"Saving {filename}...")
        self.g.serialize(destination=str(filepath), format='xml')
        file_size = filepath.stat().st_size / (1024 * 1024)  # MB
        print(f"  ‚úÖ Saved: {filepath}")
        print(f"  üì¶ File size: {file_size:.2f} MB")
        
        print(f"\nüìä Final statistics:")
        print(f"   Total triples: {len(self.g):,}")
        print(f"   Tanks: {len(self.tank_counter)}")
        print(f"   Maps: {len(self.map_counter)}")
        print(f"   Battles: {self.battle_counter if hasattr(self, 'battle_counter') else 'N/A'}")
        print(f"   Guns: {len(self.gun_counter)}")
        print(f"   Engines: {len(self.engine_counter)}")
        print(f"   Turrets: {len(self.turret_counter)}")
        print(f"   Suspensions: {len(self.suspension_counter)}")
        print(f"   Radios: {len(self.radio_counter)}")


def main():
    parser = argparse.ArgumentParser(description='Import WoT data to RDF Knowledge Graph')
    parser.add_argument('--battles', type=int, default=30000,
                       help='Number of battles to import (default: 30000)')
    parser.add_argument('--tanks', type=int, default=None, 
                       help='Number of tank configs to import (default: all)')
    parser.add_argument('--output', type=str, default='wot_with_data', 
                       help='Output filename prefix (default: wot_with_data)')
    parser.add_argument('--no-random', action='store_true',
                       help='Disable random sampling (take first N battles)')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("WORLD OF TANKS KNOWLEDGE GRAPH - DATA IMPORTER")
    print("=" * 60)
    print(f"\nConfiguration:")
    print(f"  Battles to import: {args.battles:,}")
    print(f"  Tanks to import: {args.tanks if args.tanks else 'all'}")
    print(f"  Random sampling: {not args.no_random}")
    print(f"  Output filename: {args.output}")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–Ω—Ç–æ–ª–æ–≥–∏—é
    ontology_file = Path(__file__).parent.parent / "ontology" / "wot_ontology.owl"
    
    if not ontology_file.exists():
        print(f"\n‚ùå Ontology not found: {ontology_file}")
        print("Please run create_ontology.py first!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = DataImporter(ontology_file)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–Ω–∫–∞—Ö
    importer.import_tanks_from_wot_data(limit=args.tanks)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ—è—Ö
    importer.import_battles_from_tomato(limit=args.battles, random_sample=not args.no_random)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    importer.save_graph(output_name=args.output)
    
    print("\n" + "=" * 60)
    print("‚úÖ DATA IMPORT COMPLETED!")
    print("=" * 60)
    print(f"\nYou can now:")
    print(f"  1. Open {args.output}.owl in Prot√©g√©")
    print(f"  2. Run SPARQL queries")
    print(f"  3. Analyze the knowledge graph")


if __name__ == "__main__":
    main()

