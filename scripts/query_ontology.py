#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–Ω—Ç–æ–ª–æ–≥–∏–µ–π World of Tanks –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SPARQL –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from rdflib import Graph, Namespace
from pathlib import Path
import argparse
import time


class OntologyQueryEngine:
    def __init__(self, ontology_file):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.g = Graph()
        self.ontology_file = Path(ontology_file)

        # Namespace
        self.WOT = Namespace("http://www.semanticweb.org/ontology/wot#")
        self.g.bind("wot", self.WOT)

        print("=" * 60)
        print("WORLD OF TANKS ONTOLOGY QUERY ENGINE")
        print("=" * 60)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω—Ç–æ–ª–æ–≥–∏—é
        print(f"\nüìÇ Loading ontology: {self.ontology_file.name}")
        start_time = time.time()

        try:
            self.g.parse(str(self.ontology_file), format='xml')
            load_time = time.time() - start_time

            print(f"‚úÖ Loaded successfully in {load_time:.2f} seconds")
            print(f"üìä Total triples: {len(self.g):,}")

        except Exception as e:
            print(f"‚ùå Error loading ontology: {e}")
            raise

    def execute_query(self, query, description=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SPARQL –∑–∞–ø—Ä–æ—Å"""
        if description:
            print(f"\n{'=' * 60}")
            print(f"üîç {description}")
            print(f"{'=' * 60}")

        try:
            start_time = time.time()
            results = self.g.query(query)
            query_time = time.time() - start_time

            result_list = list(results)
            print(f"\n‚è±Ô∏è  Query executed in {query_time:.3f} seconds")
            print(f"üìã Results: {len(result_list)} rows\n")

            return result_list

        except Exception as e:
            print(f"‚ùå Query error: {e}")
            return []

    def print_results(self, results, limit=None):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞"""
        if not results:
            print("No results found.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        if results:
            headers = list(results[0].labels)
            col_widths = {h: len(str(h)) for h in headers}

            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
            for row in results[:100]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫
                for header in headers:
                    value = row[header]
                    if value:
                        value_str = self.format_value(value)
                        col_widths[header] = max(col_widths[header], len(value_str))

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            for header in headers:
                col_widths[header] = min(col_widths[header], 50)

        # –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_line = " | ".join([h.ljust(col_widths[h]) for h in headers])
        print(header_line)
        print("-" * len(header_line))

        # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        display_results = results[:limit] if limit else results
        for row in display_results:
            row_values = []
            for header in headers:
                value = row[header]
                value_str = self.format_value(value) if value else ""
                row_values.append(value_str.ljust(col_widths[header]))
            print(" | ".join(row_values))

        if limit and len(results) > limit:
            print(f"\n... and {len(results) - limit} more rows")

    def format_value(self, value):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        value_str = str(value)

        # –£–±–∏—Ä–∞–µ–º namespace –∏–∑ URI
        if "http://www.semanticweb.org/ontology/wot#" in value_str:
            value_str = value_str.split("#")[-1]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        if value_str.replace('.', '').replace('-', '').isdigit():
            try:
                num = float(value_str)
                if num.is_integer():
                    return str(int(num))
                else:
                    return f"{num:.2f}"
            except:
                pass

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        if len(value_str) > 50:
            return value_str[:47] + "..."

        return value_str

    def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏"""
        print("\n" + "=" * 60)
        print("üìä ONTOLOGY STATISTICS")
        print("=" * 60)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        class_query = """
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        
        SELECT (COUNT(DISTINCT ?class) AS ?count)
        WHERE {
          ?class rdf:type owl:Class .
        }
        """

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
        instances_query = """
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?class (COUNT(?instance) AS ?count)
        WHERE {
          ?instance rdf:type ?class .
          FILTER(STRSTARTS(STR(?class), "http://www.semanticweb.org/ontology/wot#"))
        }
        GROUP BY ?class
        ORDER BY DESC(?count)
        """

        print("\nüéØ Instances by class:")
        results = self.execute_query(instances_query)
        self.print_results(results, limit=20)

    # ==================== –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ó–ê–ü–†–û–°–´ ====================

    def query_top_tanks_by_winrate(self, min_battles=50, limit=10):
        """–¢–æ–ø —Ç–∞–Ω–∫–æ–≤ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ–±–µ–¥"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        
        SELECT ?tankName 
               (COUNT(?perf) AS ?totalBattles)
               ((SUM(IF(?won, 1, 0)) * 100.0 / COUNT(?perf)) AS ?winRate)
        WHERE {{
          ?perf wot:withTank ?tank .
          ?perf wot:inBattle ?battle .
          ?battle wot:won ?won .
          ?tank wot:tankName ?tankName .
        }}
        GROUP BY ?tankName
        HAVING (COUNT(?perf) > {min_battles})
        ORDER BY DESC(?winRate)
        LIMIT {limit}
        """

        results = self.execute_query(query, f"Top {limit} Tanks by Win Rate (min {min_battles} battles)")
        self.print_results(results)

    def query_average_damage_by_class(self):
        """–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –ø–æ –∫–ª–∞—Å—Å–∞–º —Ç–∞–Ω–∫–æ–≤"""
        query = """
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?tankType 
               (AVG(?damage) AS ?avgDamage) 
               (COUNT(?perf) AS ?battles)
        WHERE {
          ?perf wot:withTank ?tank .
          ?perf wot:damage ?damage .
          ?tank rdf:type ?tankType .
          FILTER(?tankType IN (wot:HeavyTank, wot:MediumTank, wot:LightTank, 
                               wot:TankDestroyer, wot:SelfPropelledGun))
        }
        GROUP BY ?tankType
        ORDER BY DESC(?avgDamage)
        """

        results = self.execute_query(query, "Average Damage by Tank Class")
        self.print_results(results)

    def query_best_players(self, limit=10):
        """–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —É—Ä–æ–Ω—É"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        
        SELECT ?playerName 
               (AVG(?damage) AS ?avgDamage)
               (AVG(?frags) AS ?avgFrags)
               (COUNT(?perf) AS ?battles)
        WHERE {{
          ?perf wot:achievedBy ?player .
          ?perf wot:damage ?damage .
          ?perf wot:frags ?frags .
          ?player wot:displayName ?playerName .
        }}
        GROUP BY ?playerName
        ORDER BY DESC(?avgDamage)
        LIMIT {limit}
        """

        results = self.execute_query(query, f"Top {limit} Players by Average Damage")
        self.print_results(results)

    def query_tanks_by_nation(self, nation):
        """–¢–∞–Ω–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –Ω–∞—Ü–∏–∏"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?tankName ?tier ?type
        WHERE {{
          ?tank wot:belongsToNation wot:{nation} .
          ?tank wot:tankName ?tankName .
          ?tank wot:tier ?tier .
          ?tank rdf:type ?type .
          FILTER(?type IN (wot:HeavyTank, wot:MediumTank, wot:LightTank, 
                          wot:TankDestroyer, wot:SelfPropelledGun))
        }}
        ORDER BY ?tier ?tankName
        """

        results = self.execute_query(query, f"Tanks of Nation: {nation}")
        self.print_results(results, limit=30)

    def query_spotting_masters(self, limit=10):
        """–¢–∞–Ω–∫–∏ –ª—É—á—à–∏–µ –¥–ª—è –∑–∞—Å–≤–µ—Ç–∞"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        
        SELECT ?tankName 
               (AVG(?spots) AS ?avgSpots)
               (AVG(?spottingAssist) AS ?avgSpottingDmg)
               (COUNT(?perf) AS ?battles)
        WHERE {{
          ?perf wot:withTank ?tank .
          ?perf wot:spots ?spots .
          ?perf wot:spottingAssist ?spottingAssist .
          ?tank wot:tankName ?tankName .
        }}
        GROUP BY ?tankName
        HAVING (AVG(?spots) > 0.5)
        ORDER BY DESC(?avgSpots)
        LIMIT {limit}
        """

        results = self.execute_query(query, f"Top {limit} Tanks for Spotting")
        self.print_results(results)

    def query_guns_with_highest_dpm(self, limit=10):
        """–û—Ä—É–¥–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º DPM"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        
        SELECT ?gunName ?dpm ?avgDamage ?fireRate
        WHERE {{
          ?gun rdf:type wot:Gun .
          ?gun wot:gunName ?gunName .
          ?gun wot:dpm ?dpm .
          OPTIONAL {{ ?gun wot:avgDamage ?avgDamage }}
          OPTIONAL {{ ?gun wot:fireRate ?fireRate }}
        }}
        ORDER BY DESC(?dpm)
        LIMIT {limit}
        """

        results = self.execute_query(query, f"Top {limit} Guns by DPM")
        self.print_results(results)

    def query_engines_by_power(self, limit=10):
        """–î–≤–∏–≥–∞—Ç–µ–ª–∏ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏"""
        query = f"""
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?engine ?power
        WHERE {{
          ?engine rdf:type wot:Engine .
          ?engine wot:power ?power .
        }}
        ORDER BY DESC(?power)
        LIMIT {limit}
        """

        results = self.execute_query(query, f"Top {limit} Engines by Power")
        self.print_results(results)

    def query_nation_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Ü–∏—è–º"""
        query = """
        PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
        
        SELECT ?nationName
               (COUNT(?perf) AS ?battles)
               ((SUM(IF(?won, 1, 0)) * 100.0 / COUNT(?perf)) AS ?winRate)
               (AVG(?damage) AS ?avgDamage)
        WHERE {
          ?perf wot:withTank ?tank .
          ?perf wot:inBattle ?battle .
          ?perf wot:damage ?damage .
          ?battle wot:won ?won .
          ?tank wot:belongsToNation ?nation .
          ?nation wot:nationName ?nationName .
        }
        GROUP BY ?nationName
        ORDER BY DESC(?winRate)
        """

        results = self.execute_query(query, "Statistics by Nation")
        self.print_results(results)

    def query_best_tanks_by_composite(self, limit=10, tier=None, exclude_premium=False, exclude_gift=False):
        """–õ—É—á—à–∏–µ —Ç–∞–Ω–∫–∏ –ø–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ–º—É —Å–∫–æ—Ä—É (–±–µ–∑ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∏, –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ—Ç—Ä–∏–∫)"""
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        premium_filters = ""
        if exclude_premium:
            premium_filters += """
      OPTIONAL { ?tank wot:isPremium ?isPrem . }
      FILTER( !BOUND(?isPrem) || ?isPrem = false )
    """
        if exclude_gift:
            premium_filters += """
      OPTIONAL { ?tank wot:isGift ?isGift . }
      FILTER( !BOUND(?isGift) || ?isGift = false )
    """

        tier_filter = f"\n  FILTER(?tier = {int(tier)})" if tier is not None else ""

        query = f"""
    PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>
    PREFIX wot:  <http://www.semanticweb.org/ontology/wot#>

    SELECT ?tank ?label ?tier ?score ?dpmEff ?penF ?alphaF ?aimF ?speedF ?hpAny ?ptw
    WHERE {{
      ?tank a wot:Tank .
      OPTIONAL {{ ?tank wot:tankName  ?name . }}
      OPTIONAL {{ ?tank wot:shortName ?shortName . }}
      OPTIONAL {{ ?tank wot:tier      ?tier . }}
      BIND(COALESCE(?name, ?shortName) AS ?label)

      OPTIONAL {{
        ?tank wot:hasGun ?gun .
        OPTIONAL {{ ?gun wot:dpm            ?dpm        }}
        OPTIONAL {{ ?gun wot:avgDamage      ?avgDamage  }}
        OPTIONAL {{ ?gun wot:avgPenetration ?pen        }}
        OPTIONAL {{ ?gun wot:fireRate       ?fr         }}
        OPTIONAL {{ ?gun wot:aimTime        ?aim        }}
      }}

      OPTIONAL {{
        ?tank wot:hasCharacteristics ?ch .
        OPTIONAL {{ ?ch wot:speedForward ?topSpeed }}
        OPTIONAL {{ ?ch wot:hp           ?hpCh     }}
      }}
      OPTIONAL {{ ?tank wot:maxHP  ?hpMax  }}
      OPTIONAL {{ ?tank wot:weight ?weight }}

      OPTIONAL {{
        ?tank wot:hasEngine ?engine .
        OPTIONAL {{ ?engine wot:power ?power }}
      }}

      # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π DPM (–≥–æ—Ç–æ–≤—ã–π –∏–ª–∏ fireRate * avgDamage)
      BIND(
        COALESCE(
          xsd:decimal(?dpm),
          IF(BOUND(?fr) && BOUND(?avgDamage),
             xsd:decimal(?fr) * xsd:decimal(?avgDamage),
             xsd:decimal("0")
          )
        ) AS ?dpmEff
      )

      # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      BIND(COALESCE(xsd:decimal(?pen),       xsd:decimal("0")) AS ?penF)
      BIND(COALESCE(xsd:decimal(?avgDamage), xsd:decimal("0")) AS ?alphaF)
      BIND(COALESCE(xsd:decimal(?aim),       xsd:decimal("3")) AS ?aimF)
      BIND(COALESCE(xsd:decimal(?topSpeed),  xsd:decimal("0")) AS ?speedF)
      BIND(COALESCE(xsd:decimal(?hpMax), xsd:decimal(?hpCh), xsd:decimal("0")) AS ?hpAny)

      # –£–¥–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å
      BIND(
        IF(BOUND(?power) && BOUND(?weight) && xsd:decimal(?weight) > 0,
           xsd:decimal(?power) / xsd:decimal(?weight),
           xsd:decimal("0")
        ) AS ?ptw
      )

      # –í–µ—Å–∞ (–±–µ–∑ –Ω–æ—Ä–º–∏—Ä–æ–≤–æ–∫)
      BIND(xsd:decimal("0.000075")   AS ?wDpm)   # DPM
      BIND(xsd:decimal("0.00050")    AS ?wPen)   # –ø—Ä–æ–±–∏—Ç–∏–µ
      BIND(xsd:decimal("0.00013333") AS ?wAlpha) # –∞–ª—å—Ñ–∞-—É—Ä–æ–Ω
      BIND(xsd:decimal("0.00200")    AS ?wSpd)   # —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ø–µ—Ä–µ–¥
      BIND(xsd:decimal("0.000050")   AS ?wHp)    # HP
      BIND(xsd:decimal("0.00400")    AS ?wPtw)   # —É–¥. –º–æ—â–Ω–æ—Å—Ç—å
      BIND(xsd:decimal("0.01250")    AS ?wAim)   # —à—Ç—Ä–∞—Ñ –∑–∞ aimTime

      # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä (aimTime —Å –º–∏–Ω—É—Å–æ–º)
      BIND(
        (?wDpm  * ?dpmEff) +
        (?wPen  * ?penF)   +
        (?wAlpha* ?alphaF) +
        (?wSpd  * ?speedF) +
        (?wHp   * ?hpAny)  +
        (?wPtw  * ?ptw)    -
        (?wAim  * ?aimF)
        AS ?score
      )

      {premium_filters}
      {tier_filter}
    }}
    ORDER BY DESC(?score)
    LIMIT {limit}
    """
        desc = "Best Tanks by Composite Score"
        if tier is not None:
            desc += f" (tier {tier})"
        if exclude_premium or exclude_gift:
            flags = []
            if exclude_premium: flags.append("no-premium")
            if exclude_gift:    flags.append("no-gift")
            desc += " [" + ", ".join(flags) + "]"
        results = self.execute_query(query, desc)
        self.print_results(results, limit=limit)
        return results

    def query_best_nation_by_weighted_tanks(self, limit=10):
        """–ö–∞–∫–∞—è –Ω–∞—Ü–∏—è –∏–º–µ–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –±–æ–ª—å—à–µ –ª—É—á—à–∏—Ö —Ç–∞–Ω–∫–æ–≤: –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Å–∫–æ—Ä—É, –≤–µ—Å = tier"""
        query = """
    PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>
    PREFIX wot:  <http://www.semanticweb.org/ontology/wot#>

    SELECT ?nationName
           (AVG(?score) AS ?avgScore)
           ((SUM(?weightedScore) / SUM(?tierWeight)) AS ?weightedAvgScore)
           (COUNT(?tank) AS ?tankCount)
    WHERE {
      {
        SELECT ?tank ?nationName ?tier ?score
               (COALESCE(xsd:decimal(?tier), xsd:decimal("1")) AS ?tierWeight)
               ((?score * COALESCE(xsd:decimal(?tier), xsd:decimal("1"))) AS ?weightedScore)
        WHERE {
          ?tank a wot:Tank .
          ?tank wot:belongsToNation ?nation .
          ?nation wot:nationName ?nationName .
          OPTIONAL { ?tank wot:tier ?tier . }

          OPTIONAL {
            ?tank wot:hasGun ?gun .
            OPTIONAL { ?gun wot:dpm            ?dpm        }
            OPTIONAL { ?gun wot:avgDamage      ?avgDamage  }
            OPTIONAL { ?gun wot:avgPenetration ?pen        }
            OPTIONAL { ?gun wot:fireRate       ?fr         }
            OPTIONAL { ?gun wot:aimTime        ?aim        }
          }

          OPTIONAL {
            ?tank wot:hasCharacteristics ?ch .
            OPTIONAL { ?ch wot:speedForward ?topSpeed }
            OPTIONAL { ?ch wot:hp           ?hpCh     }
          }
          OPTIONAL { ?tank wot:maxHP  ?hpMax  }
          OPTIONAL { ?tank wot:weight ?weight }

          OPTIONAL {
            ?tank wot:hasEngine ?engine .
            OPTIONAL { ?engine wot:power ?power }
          }

          BIND(
            COALESCE(
              xsd:decimal(?dpm),
              IF(BOUND(?fr) && BOUND(?avgDamage),
                 xsd:decimal(?fr) * xsd:decimal(?avgDamage),
                 xsd:decimal("0")
              )
            ) AS ?dpmEff
          )

          BIND(COALESCE(xsd:decimal(?pen),       xsd:decimal("0")) AS ?penF)
          BIND(COALESCE(xsd:decimal(?avgDamage), xsd:decimal("0")) AS ?alphaF)
          BIND(COALESCE(xsd:decimal(?aim),       xsd:decimal("3")) AS ?aimF)
          BIND(COALESCE(xsd:decimal(?topSpeed),  xsd:decimal("0")) AS ?speedF)
          BIND(COALESCE(xsd:decimal(?hpMax), xsd:decimal(?hpCh), xsd:decimal("0")) AS ?hpAny)

          BIND(
            IF(BOUND(?power) && BOUND(?weight) && xsd:decimal(?weight) > 0,
               xsd:decimal(?power) / xsd:decimal(?weight),
               xsd:decimal("0")
            ) AS ?ptw
          )

          BIND(xsd:decimal("0.000075")   AS ?wDpm)
          BIND(xsd:decimal("0.00050")    AS ?wPen)
          BIND(xsd:decimal("0.00013333") AS ?wAlpha)
          BIND(xsd:decimal("0.00200")    AS ?wSpd)
          BIND(xsd:decimal("0.000050")   AS ?wHp)
          BIND(xsd:decimal("0.00400")    AS ?wPtw)
          BIND(xsd:decimal("0.01250")    AS ?wAim)

          BIND(
            (?wDpm  * ?dpmEff) +
            (?wPen  * ?penF)   +
            (?wAlpha* ?alphaF) +
            (?wSpd  * ?speedF) +
            (?wHp   * ?hpAny)  +
            (?wPtw  * ?ptw)    -
            (?wAim  * ?aimF)
            AS ?score
          )

          # –ü—Ä–∏–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):
          # OPTIONAL { ?tank wot:isPremium ?isPrem . }
          # OPTIONAL { ?tank wot:isGift    ?isGift . }
          # FILTER( !BOUND(?isPrem) || ?isPrem = false )
          # FILTER( !BOUND(?isGift) || ?isGift = false )
        }
      }
    }
    GROUP BY ?nationName
    ORDER BY DESC(?weightedAvgScore)
    LIMIT 1
    """
        results = self.execute_query(query, "Best Nation by Weighted Average of 'Best' Tanks (weight = tier)")
        self.print_results(results, limit=limit)
        return results

    def query_tank_with_highest_avg_damage(self, min_battles=50, top_n=1):
        """–¢–∞–Ω–∫(–∏) —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º —É—Ä–æ–Ω–æ–º, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º –ø–æ –¥–∞–Ω–Ω—ã–º –±–æ—ë–≤"""

        query = f""" 
        PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>
        PREFIX wot:  <http://www.semanticweb.org/ontology/wot#>

    
        SELECT ?tank ?tankName
               (AVG(xsd:decimal(?damage)) AS ?avgDamage)
               (COUNT(?perf) AS ?battles)
        WHERE {{
          ?perf wot:withTank ?tank .
          ?perf wot:damage   ?damage .
          ?tank wot:tankName ?tankName .
        }}
        GROUP BY ?tank ?tankName
        HAVING (COUNT(?perf) >= {min_battles})
        ORDER BY DESC(?avgDamage) DESC(?battles)
        LIMIT {top_n}
        """
        results = self.execute_query(
            query,
            f"Tank(s) with Highest Average Damage (min {min_battles} battles)"
        )
        self.print_results(results, limit=top_n)
        return results

    def query_worst_maps_for_tank(self, tank_name, min_battles=10, limit=2):
        """–¢–æ–ø —Ö—É–¥—à–∏—Ö –∫–∞—Ä—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–Ω–∫–∞ –ø–æ win rate (–ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –ø–æ —á–∏—Å–ª—É –±–æ—ë–≤, –∑–∞—Ç–µ–º –ø–æ —É—Ä–æ–Ω—É)"""

        safe_name = str(tank_name).replace('"', '\\"')
        safe_name_lc = safe_name.lower()

        query = f"""
        PREFIX wot:  <http://www.semanticweb.org/ontology/wot#>
        PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>

        SELECT ?mapName
               ?battles
               ?winRate
               ?avgDamage
        WHERE {{
          {{
            SELECT (SAMPLE(?mapRaw) AS ?mapName)
                   (COUNT(?battle) AS ?battles)
                   ((SUM(IF(?won = true, 1, 0)) * 100.0 / COUNT(?battle)) AS ?winRate)
                   (AVG(COALESCE(xsd:decimal(?damage), xsd:decimal("0"))) AS ?avgDamage)
            WHERE {{
              # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–∞–Ω–∫ –ø–æ –∏–º–µ–Ω–∏/–∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
              ?tank wot:tankName ?tName .
              OPTIONAL {{ ?tank wot:shortName ?sName . }}
              FILTER(LCASE(STR(?tName)) = "{safe_name_lc}" || LCASE(STR(?sName)) = "{safe_name_lc}")

              # Performance —ç—Ç–æ–≥–æ —Ç–∞–Ω–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–æ–∏
              ?perf   wot:withTank ?tank .
              ?perf   wot:inBattle ?battle .
              ?battle wot:won ?won .
              ?battle wot:onMap ?mapRaw .
              OPTIONAL {{ ?perf wot:damage ?damage . }}

              # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä—É, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω—è—Ç—å 'Himmelsdorf' –∏ 'himmelsdorf'
              BIND(LCASE(STR(?mapRaw)) AS ?mapKey)
            }}
            GROUP BY ?mapKey
            HAVING (COUNT(?battle) >= {int(min_battles)})
          }}
        }}
        ORDER BY ASC(?winRate) DESC(?battles) DESC(?avgDamage)
        LIMIT {int(limit)}
        """
        results = self.execute_query(
            query,
            f"Worst {limit} Maps for Tank '{tank_name}' (min {min_battles} battles per map)"
        )
        self.print_results(results, limit=limit)
        return results

    def query_maps_with_side_imbalance(self, threshold_pct=10.0, min_battles_per_side=20, limit=50):
        """–ö–∞—Ä—Ç—ã —Å –ø–µ—Ä–µ–∫–æ—Å–æ–º –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º: –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –Ω–∞ threshold_pct –ø.–ø. —á–∞—â–µ –¥—Ä—É–≥–æ–π.
           –°—á—ë—Ç –≤–µ–¥—ë—Ç—Å—è –ø–æ –±–æ—è–º (won/spawn ‚Äî —Å–≤–æ–π—Å—Ç–≤–∞ Battle), onMap ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ."""
        query = f"""
        PREFIX wot:  <http://www.semanticweb.org/ontology/wot#>
        PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>

        SELECT
          ?mapName
          ?sideAdv ?winRateAdv ?battlesAdv
          ?sideOther ?winRateOther ?battlesOther
          (?winRateAdv - ?winRateOther AS ?winRateDiff)
        WHERE {{
          # –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ –∏ —Å—Ç–æ—Ä–æ–Ω–µ (–ø–µ—Ä–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ ‚Äî A)
          {{
            SELECT
              ?mapKey
              (SAMPLE(?mapRaw) AS ?mapName)
              ?sideA
              (COUNT(?battle) AS ?battlesA)
              ((SUM(IF(?won, 1, 0)) * 100.0 / COUNT(?battle)) AS ?winRateA)
            WHERE {{
              ?battle wot:onMap ?mapRaw ;
                      wot:spawn ?sideA ;
                      wot:won   ?won .
              BIND(LCASE(STR(?mapRaw)) AS ?mapKey)
            }}
            GROUP BY ?mapKey ?sideA
            HAVING (COUNT(?battle) >= {int(min_battles_per_side)})
          }}

          # –ê–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ –∏ —Å—Ç–æ—Ä–æ–Ω–µ (–≤—Ç–æ—Ä–∞—è –≤—ã–±–æ—Ä–∫–∞ ‚Äî B), —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ —Ç–æ–π –∂–µ –∫–∞—Ä—Ç–µ
          {{
            SELECT
              ?mapKey
              ?sideB
              (COUNT(?battle) AS ?battlesB)
              ((SUM(IF(?won, 1, 0)) * 100.0 / COUNT(?battle)) AS ?winRateB)
            WHERE {{
              ?battle wot:onMap ?mapRaw ;
                      wot:spawn ?sideB ;
                      wot:won   ?won .
              BIND(LCASE(STR(?mapRaw)) AS ?mapKey)
            }}
            GROUP BY ?mapKey ?sideB
            HAVING (COUNT(?battle) >= {int(min_battles_per_side)})
          }}

          # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã; < ‚Äî —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã
          FILTER(?sideA != ?sideB)
          FILTER(?sideA <  ?sideB)

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º
          BIND(IF(?winRateA >= ?winRateB, ?sideA, ?sideB) AS ?sideAdv)
          BIND(IF(?winRateA >= ?winRateB, ?winRateA, ?winRateB) AS ?winRateAdv)
          BIND(IF(?winRateA >= ?winRateB, ?battlesA, ?battlesB) AS ?battlesAdv)

          # –ò –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É (—Å –º–µ–Ω—å—à–∏–º win rate)
          BIND(IF(?winRateA >= ?winRateB, ?sideB, ?sideA) AS ?sideOther)
          BIND(IF(?winRateA >= ?winRateB, ?winRateB, ?winRateA) AS ?winRateOther)
          BIND(IF(?winRateA >= ?winRateB, ?battlesB, ?battlesA) AS ?battlesOther)

          # –ü–æ—Ä–æ–≥ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –ø–æ–±–µ–¥
          FILTER((?winRateAdv - ?winRateOther) >= {float(threshold_pct)})
        }}
        ORDER BY DESC(?winRateDiff) DESC(?battlesAdv) DESC(?battlesOther) ?mapName
        LIMIT {int(limit)}
        """
        results = self.execute_query(
            query,
            f"Maps with Side Imbalance (ŒîWR ‚â• {threshold_pct} pp; ‚â• {min_battles_per_side} battles per side)"
        )
        self.print_results(results, limit=limit)
        return results

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("\n" + "=" * 60)
        print("üéÆ INTERACTIVE MODE")
        print("=" * 60)
        print("\nEnter SPARQL query (type 'exit' to quit, 'help' for examples):\n")

        while True:
            try:
                print("\n" + ">" * 60)
                lines = []
                while True:
                    line = input()
                    if line.strip().lower() == 'exit':
                        return
                    if line.strip().lower() == 'help':
                        self.show_help()
                        break
                    lines.append(line)
                    if line.strip().endswith('}') or line.strip().endswith(';'):
                        break

                if lines:
                    query = '\n'.join(lines)
                    results = self.execute_query(query)
                    self.print_results(results, limit=50)

            except KeyboardInterrupt:
                print("\n\nExiting...")
                break
            except Exception as e:
                print(f"Error: {e}")

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("\n" + "=" * 60)
        print("üìö QUERY EXAMPLES")
        print("=" * 60)

        examples = {
            "All tanks": """
PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
SELECT ?tank ?name WHERE {
  ?tank wot:tankName ?name .
} LIMIT 10
            """,

            "Heavy tanks tier 10": """
PREFIX wot: <http://www.semanticweb.org/ontology/wot#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?name ?hp WHERE {
  ?tank rdf:type wot:HeavyTank .
  ?tank wot:tier 10 .
  ?tank wot:tankName ?name .
  OPTIONAL { ?tank wot:maxHP ?hp }
}
            """
        }

        for title, query in examples.items():
            print(f"\n### {title}:")
            print(query)


def main():
    parser = argparse.ArgumentParser(description='Query World of Tanks Ontology')
    parser.add_argument('--ontology', type=str,
                        default='ontology/wot_with_data.owl',
                        help='Path to ontology file')
    parser.add_argument('--query', type=str,
                        help='Predefined query to run')
    parser.add_argument('--interactive', action='store_true',
                        help='Start interactive mode')
    parser.add_argument('--stats', action='store_true',
                        help='Show ontology statistics')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ–Ω—Ç–æ–ª–æ–≥–∏–∏
    ontology_path = Path(__file__).parent.parent / args.ontology

    if not ontology_path.exists():
        print(f"‚ùå Ontology file not found: {ontology_path}")
        print("\nAvailable files:")
        ontology_dir = ontology_path.parent
        if ontology_dir.exists():
            for f in ontology_dir.glob("*.owl"):
                print(f"  - {f.name}")
        return

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    engine = OntologyQueryEngine(ontology_path)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if args.stats:
        engine.get_statistics()
        return

    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if args.query:
        query_map = {
            'best-tanks': lambda: engine.query_best_tanks_by_composite(limit=10),
            'best-nation': lambda: engine.query_best_nation_by_weighted_tanks(limit=10)
        }

        if args.query in query_map:
            query_map[args.query]()
        else:
            print(f"‚ùå Unknown query: {args.query}")
            print("\nAvailable queries:")
            for key in query_map.keys():
                print(f"  - {key}")
        return

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        engine.interactive_mode()
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n" + "=" * 60)
    print("üöÄ RUNNING SAMPLE QUERIES")
    print("=" * 60)

    engine.query_best_tanks_by_composite(limit=10)
    engine.query_best_nation_by_weighted_tanks(limit=1)
    engine.query_tank_with_highest_avg_damage(min_battles=50, top_n=1)
    engine.query_worst_maps_for_tank("B-C 25 t", min_battles=1, limit=2)
    engine.query_maps_with_side_imbalance(threshold_pct=5.0, min_battles_per_side=4, limit=5)

    print("\n" + "=" * 60)
    print("üí° TIP: Use --query <name> or --interactive for more options")
    print("   Run with --help to see all options")
    print("=" * 60)


if __name__ == "__main__":
    main()
